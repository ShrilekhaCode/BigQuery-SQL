{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fffb64e7",
   "metadata": {
    "papermill": {
     "duration": 0.004059,
     "end_time": "2025-01-09T19:11:46.065882",
     "exception": false,
     "start_time": "2025-01-09T19:11:46.061823",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [SQL](https://www.kaggle.com/learn/intro-to-sql) course.  You can reference the tutorial at [this link](https://www.kaggle.com/dansbecker/group-by-having-count).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0bd7160",
   "metadata": {
    "papermill": {
     "duration": 0.003304,
     "end_time": "2025-01-09T19:11:46.072747",
     "exception": false,
     "start_time": "2025-01-09T19:11:46.069443",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "Queries with **GROUP BY** can be powerful. There are many small things that can trip you up (like the order of the clauses), but it will start to feel natural once you've done it a few times. Here, you'll write queries using **GROUP BY** to answer questions from the Hacker News dataset.\n",
    "\n",
    "Before you get started, run the following cell to set everything up:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a768e61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-09T19:11:46.080477Z",
     "iopub.status.busy": "2025-01-09T19:11:46.080146Z",
     "iopub.status.idle": "2025-01-09T19:11:55.289548Z",
     "shell.execute_reply": "2025-01-09T19:11:55.288233Z"
    },
    "papermill": {
     "duration": 9.215452,
     "end_time": "2025-01-09T19:11:55.291439",
     "exception": false,
     "start_time": "2025-01-09T19:11:46.075987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using Kaggle's public dataset BigQuery integration.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/google/cloud/bigquery/table.py:1727: UserWarning: BigQuery Storage module not found, fetch data with the REST endpoint instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup Complete\n"
     ]
    }
   ],
   "source": [
    "# Set up feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.sql.ex3 import *\n",
    "print(\"Setup Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38aab4db",
   "metadata": {
    "papermill": {
     "duration": 0.003259,
     "end_time": "2025-01-09T19:11:55.298536",
     "exception": false,
     "start_time": "2025-01-09T19:11:55.295277",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The code cell below fetches the `full` table from the `hacker_news` dataset.  We also preview the first five rows of the table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23a6baa2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-09T19:11:55.307014Z",
     "iopub.status.busy": "2025-01-09T19:11:55.306453Z",
     "iopub.status.idle": "2025-01-09T19:11:56.345593Z",
     "shell.execute_reply": "2025-01-09T19:11:56.344443Z"
    },
    "papermill": {
     "duration": 1.045214,
     "end_time": "2025-01-09T19:11:56.347289",
     "exception": false,
     "start_time": "2025-01-09T19:11:55.302075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using Kaggle's public dataset BigQuery integration.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>url</th>\n",
       "      <th>text</th>\n",
       "      <th>dead</th>\n",
       "      <th>by</th>\n",
       "      <th>score</th>\n",
       "      <th>time</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>type</th>\n",
       "      <th>id</th>\n",
       "      <th>parent</th>\n",
       "      <th>descendants</th>\n",
       "      <th>ranking</th>\n",
       "      <th>deleted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>1349416819</td>\n",
       "      <td>2012-10-05 06:00:19+00:00</td>\n",
       "      <td>story</td>\n",
       "      <td>4615841</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>1349419795</td>\n",
       "      <td>2012-10-05 06:49:55+00:00</td>\n",
       "      <td>story</td>\n",
       "      <td>4615926</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>1349425338</td>\n",
       "      <td>2012-10-05 08:22:18+00:00</td>\n",
       "      <td>story</td>\n",
       "      <td>4616068</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>1349425741</td>\n",
       "      <td>2012-10-05 08:29:01+00:00</td>\n",
       "      <td>story</td>\n",
       "      <td>4616080</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>None</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>1349428004</td>\n",
       "      <td>2012-10-05 09:06:44+00:00</td>\n",
       "      <td>story</td>\n",
       "      <td>4616157</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  title   url  text  dead    by  score        time                 timestamp  \\\n",
       "0  None  None  None  <NA>  None   <NA>  1349416819 2012-10-05 06:00:19+00:00   \n",
       "1  None  None  None  <NA>  None   <NA>  1349419795 2012-10-05 06:49:55+00:00   \n",
       "2  None  None  None  <NA>  None   <NA>  1349425338 2012-10-05 08:22:18+00:00   \n",
       "3  None  None  None  <NA>  None   <NA>  1349425741 2012-10-05 08:29:01+00:00   \n",
       "4  None  None  None  <NA>  None   <NA>  1349428004 2012-10-05 09:06:44+00:00   \n",
       "\n",
       "    type       id  parent  descendants  ranking  deleted  \n",
       "0  story  4615841    <NA>         <NA>     <NA>     <NA>  \n",
       "1  story  4615926    <NA>         <NA>     <NA>     <NA>  \n",
       "2  story  4616068    <NA>         <NA>     <NA>     <NA>  \n",
       "3  story  4616080    <NA>         <NA>     <NA>     <NA>  \n",
       "4  story  4616157    <NA>         <NA>     <NA>     <NA>  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from google.cloud import bigquery\n",
    "\n",
    "# Create a \"Client\" object\n",
    "client = bigquery.Client()\n",
    "\n",
    "# Construct a reference to the \"hacker_news\" dataset\n",
    "dataset_ref = client.dataset(\"hacker_news\", project=\"bigquery-public-data\")\n",
    "\n",
    "# API request - fetch the dataset\n",
    "dataset = client.get_dataset(dataset_ref)\n",
    "\n",
    "# Construct a reference to the \"full\" table\n",
    "table_ref = dataset_ref.table(\"full\")\n",
    "\n",
    "# API request - fetch the table\n",
    "table = client.get_table(table_ref)\n",
    "\n",
    "# Preview the first five lines of the table\n",
    "client.list_rows(table, max_results=5).to_dataframe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f2aeb29",
   "metadata": {
    "papermill": {
     "duration": 0.003695,
     "end_time": "2025-01-09T19:11:56.355087",
     "exception": false,
     "start_time": "2025-01-09T19:11:56.351392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exercises\n",
    "\n",
    "### 1) Prolific commenters\n",
    "\n",
    "Hacker News would like to send awards to everyone who has written more than 10,000 posts. Write a query that returns all authors with more than 10,000 posts as well as their post counts. Call the column with post counts `NumPosts`.\n",
    "\n",
    "In case sample query is helpful, here is a query you saw in the tutorial to answer a similar question:\n",
    "```\n",
    "query = \"\"\"\n",
    "        SELECT parent, COUNT(1) AS NumPosts\n",
    "        FROM `bigquery-public-data.hacker_news.full`\n",
    "        GROUP BY parent\n",
    "        HAVING COUNT(1) > 10\n",
    "        \"\"\"\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7cdcc735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-09T19:11:56.364149Z",
     "iopub.status.busy": "2025-01-09T19:11:56.363792Z",
     "iopub.status.idle": "2025-01-09T19:11:58.182659Z",
     "shell.execute_reply": "2025-01-09T19:11:58.181827Z"
    },
    "papermill": {
     "duration": 1.825307,
     "end_time": "2025-01-09T19:11:58.184304",
     "exception": false,
     "start_time": "2025-01-09T19:11:56.358997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/google/cloud/bigquery/table.py:1727: UserWarning: BigQuery Storage module not found, fetch data with the REST endpoint instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         author  NumPosts\n",
      "0  pavel_lishin     13236\n",
      "1      ChuckMcM     18127\n",
      "2  seanmcdirmid     20034\n",
      "3     dllthomas     10701\n",
      "4        baddox     10321\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_ProlificCommenters\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Query to select prolific commenters and post counts\n",
    "prolific_commenters_query = \"\"\"\n",
    "        SELECT `by` as author,  COUNT(1) AS NumPosts\n",
    "        FROM `bigquery-public-data.hacker_news.full`\n",
    "        GROUP BY `by` \n",
    "        HAVING COUNT(1) > 10000\n",
    "        \"\"\" # Your code goes here\n",
    "\n",
    "# Set up the query (cancel the query if it would use too much of \n",
    "# your quota, with the limit set to 1 GB)\n",
    "safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\n",
    "query_job = client.query(prolific_commenters_query, job_config=safe_config)\n",
    "\n",
    "# API request - run the query, and return a pandas DataFrame\n",
    "prolific_commenters = query_job.to_dataframe()\n",
    "\n",
    "# View top few rows of results\n",
    "print(prolific_commenters.head())\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ada2b4",
   "metadata": {
    "papermill": {
     "duration": 0.003661,
     "end_time": "2025-01-09T19:11:58.192023",
     "exception": false,
     "start_time": "2025-01-09T19:11:58.188362",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For the solution, uncomment the line below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db517efe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-09T19:11:58.200769Z",
     "iopub.status.busy": "2025-01-09T19:11:58.200411Z",
     "iopub.status.idle": "2025-01-09T19:11:58.203962Z",
     "shell.execute_reply": "2025-01-09T19:11:58.203147Z"
    },
    "papermill": {
     "duration": 0.009488,
     "end_time": "2025-01-09T19:11:58.205394",
     "exception": false,
     "start_time": "2025-01-09T19:11:58.195906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32ad8c49",
   "metadata": {
    "papermill": {
     "duration": 0.003749,
     "end_time": "2025-01-09T19:11:58.213177",
     "exception": false,
     "start_time": "2025-01-09T19:11:58.209428",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2) Deleted comments\n",
    "\n",
    "How many comments have been deleted? (If a comment was deleted, the `deleted` column in the table will have the value `True`.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5fd05861",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-09T19:11:58.222226Z",
     "iopub.status.busy": "2025-01-09T19:11:58.221869Z",
     "iopub.status.idle": "2025-01-09T19:11:59.297647Z",
     "shell.execute_reply": "2025-01-09T19:11:59.296399Z"
    },
    "papermill": {
     "duration": 1.082356,
     "end_time": "2025-01-09T19:11:59.299483",
     "exception": false,
     "start_time": "2025-01-09T19:11:58.217127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/google/cloud/bigquery/table.py:1727: UserWarning: BigQuery Storage module not found, fetch data with the REST endpoint instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   f0_\n",
      "0    0\n"
     ]
    }
   ],
   "source": [
    "# Write your query here and figure out the answer\n",
    "num_deleted_posts_query = \"\"\"\n",
    "        SELECT COUNT(1)\n",
    "        FROM `bigquery-public-data.hacker_news.full`\n",
    "        WHERE deleted = True\n",
    "        \"\"\" \n",
    "safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\n",
    "query_job1 = client.query(num_deleted_posts_query, job_config=safe_config)\n",
    "print(query_job1.to_dataframe().head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "883e6233",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-09T19:11:59.309511Z",
     "iopub.status.busy": "2025-01-09T19:11:59.309171Z",
     "iopub.status.idle": "2025-01-09T19:11:59.317011Z",
     "shell.execute_reply": "2025-01-09T19:11:59.315820Z"
    },
    "papermill": {
     "duration": 0.014827,
     "end_time": "2025-01-09T19:11:59.318799",
     "exception": false,
     "start_time": "2025-01-09T19:11:59.303972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_NumDeletedPosts\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_deleted_posts = 0 # Put your answer here\n",
    "\n",
    "# Check your answer\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7a4b333",
   "metadata": {
    "papermill": {
     "duration": 0.00423,
     "end_time": "2025-01-09T19:11:59.327839",
     "exception": false,
     "start_time": "2025-01-09T19:11:59.323609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For the solution, uncomment the line below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7187abb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-09T19:11:59.338321Z",
     "iopub.status.busy": "2025-01-09T19:11:59.337975Z",
     "iopub.status.idle": "2025-01-09T19:11:59.341877Z",
     "shell.execute_reply": "2025-01-09T19:11:59.340801Z"
    },
    "papermill": {
     "duration": 0.011177,
     "end_time": "2025-01-09T19:11:59.343590",
     "exception": false,
     "start_time": "2025-01-09T19:11:59.332413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e1a780c",
   "metadata": {
    "papermill": {
     "duration": 0.004276,
     "end_time": "2025-01-09T19:11:59.352459",
     "exception": false,
     "start_time": "2025-01-09T19:11:59.348183",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep Going\n",
    "**[Click here](https://www.kaggle.com/dansbecker/order-by)** to move on and learn about the **ORDER BY** clause."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9645fe55",
   "metadata": {
    "papermill": {
     "duration": 0.004442,
     "end_time": "2025-01-09T19:11:59.361309",
     "exception": false,
     "start_time": "2025-01-09T19:11:59.356867",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-sql/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6057,
     "sourceId": 285982,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 16.881516,
   "end_time": "2025-01-09T19:12:00.588582",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-09T19:11:43.707066",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
